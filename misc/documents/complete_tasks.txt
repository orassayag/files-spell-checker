Complete / canceled tasks:
==========================
-Update packages + Recreate package-lock.json. *
-Due to the break changes of log-update packages, need to use postinstall script to fix the direct file: *
1. Remove the 'wrap-ansi', 'slice-ansi', 'cli-cursor', 'ansi-escapes' packages from the 'package.json' file. *
2. Delete the 'log-update' directory. *
3. Install the original 'log-update' package. *
4. Change in the 'log.utils' file to use the 'require('log-update');' syntax. *
5. Add the postinstall script, add the 'script/initiate.js' file. *
6. Add the 'INITIATE' key/value to the ScriptType enum. *
7. Add the 'postinstall' script to the 'package.json file'. *
8. Run in the terminal 'npm i' + Recreate the 'package-lock.json' file. *
9. Format the 2 files. *
10. Make sure all work as expected. *
-Remove the 'destination' parameter in the 'filterDirectories' method + Verify that backup still works. *
-Clear unused enums and make sure all in used really exists. *
-Replace the 'getCurrentDate' method with the updated one from the 'udemy-courses' project. *
-Rename and check: countLimitService.countLimitData.millisecondsSendEmailDelayCount. *
-Check and reset the '.vscode/settings.json' by 'C:/Or/Web/auto-packages-updater/auto-packages-updater/.vscode/settings.json' + *
Format all documents and re-add 'cSpell.words' all the words + add the 'cSpell.ignorePaths' + add 'dictionaries' path as well. *
-In validation file path (probably a JSON file) there is a 'Expected a number' comment, need to fix it *
(take the comment from the auto-packages-updater project). *
-Convert 'removeLastCharacter' to use 'removeLastCharacters'. *
-All time logic is in place + Take the 'getCurrentDate' function from the 'event-dates-calendar' project. *
-Make sure to have space between /* cSpell:disable */ in the 'INSTRUCTIONS.md' file. *
-Make sure to fix the grammar mistake in the 'enum.utils.js' file (an enum-like object). *
-In the 'README.md' file, fix in all places to 'In the terminal'. *
-Make sure that all places 'this.exit' function - Need to be 'await this.exit'. *
-Search for 'async ' and create a list of functions/methods, and make sure that all calls have await. *
-Scan all files for spell mistakes with the 'files-spell-checker' project. *
-Change all (where it's possible) from 'console.log' to 'logUtils.log'. *
-Take the latest settings from '.vscode/settings.json' and implement them. *
-Change in all places that globalUtils will be on top. *
-In the 'package.json' file change to 'private: false'. *
-Convert in all places from all versions of canceled keyword to 'Canceled' keyword. *
-Add in all places 'name.model' to all models. *
-Check that in all places the name of the file includes the name of tha parent directory. For example: name.model inside 'models' directory. *
-Don't forget to do the same rename logic for all the enums in the project. *
-Change in all places the config from 'misc/backup' to 'misc/backups' directory. *
-Copy the '.eslintignore' file from the 'udemy-courses' project. *
-Add to the 'package.json' file (below the 'description' field) the 'repository' field: *
"repository": { *
  "type": "git", *
  "url": "git://github.com/username/repository.git" *
} *
-Make sure all switch-case have curly braces. *
-Remove code comments to a backup TXT file. *
-Remove the duplicate empty lines: \n\s*\n\s*\n *
-Remove the first empty line: ^(?<![\s])\n *
-Remove the last empty line: \n\s*$(?!\n) *
-Detect all comments without a dot at the end: ^// .*(?<!\.)$ *
-Format all documents. *
-Verify all works well.
-After all works well - Check number 11 in the 'INSTRUCTIONS.md' file. *
-Fix TXT files spell mistakes via Gmail. *
-Move all complete tasks from here to complete_tasks.txt. *
-Upload to GitHub. *
-Backup to iOmega. *
-Copy the validation logic of 'SCAN_PATH' in initiate.service from the 'empty-directories' project. *
-Comments: Change 'validateEnumData' to 'data'. *
-Move the 'this.scanPath' to be in 'pathService'. Change all needed logic + settings.js places under === PATH ===. *
-In settings.js convert utils path to index, and check if it still works. *
-Fix all spell mistakes via Gmail. *
-Format all files. *
-Upload to GitHub. *
-Backup iOmega. *
-Clear complete tasks. *
17. Accounts re-organization: *
a. Place the 'Accounts' directory inside 'C:\Users\Or\Dropbox'. *
b. Refer all the projects to this location. *
c. Make sure that after each path change the project still works. *
-In all the maintenance projects: *
-Update packages + re-create package.json files. *
01. Update the 'REMEMBER' section of this document. *
02. ' all the outcome of the crawling will be created' comment should be updated. *
03. Add to package.json file the 'INSTRUCTIONS.md' key in the files section (if it exists in the project). *
04. In the initiate.service - const { ModeEnum, ScriptTypeEnum } = require('../../core/enums/files/system.enum'); - Need to change to ../../core/enums. *
05. Check if async copyDirectory( is not with line break. *
06. Fix createDirectory - No need for await in createSessionDirectory method. *
07. 'Validate internet connection works.' => 'Validate that the internet connection works.' *
08. '...sending emails processes.' in udemy-courses project. *
09. Rename the function 'getFileData' to 'getJsonFileData'. *
10. Copy the logic of 'this.updateStatus' to all change statuses in the main script file. *
11. On udemy-courses project, change the 'validate' and 'compare' functions to 'validateFields' and 'compareCourses'. *
12. On udemy-courses project, change 'isExpectedFilled' to 'isFilledExpected'. *
13. Change all function names that return true/false to 'isValidXXX' in validationUtils. *
14. -In all places change to use isExists instead of .length > 0 or .length <= 0. *
15. Copy the logic of retry on check internet connection in all relevant projects (like in the udemy courses project). *
16. Add to 'INSTRUCTIONS.md' how the console log should be (take the specific sentence from another project). *
18. Place this in all "ToDo" documents of all the projects. *
16. Add 'INSTRUCTIONS.md' file if it does not exist (add it to files in package.json). *
17. Add to 'INSTRUCTIONS.md' how the console log should be (take the specific sentence from another project) + *
 /* cSpell:disable */ before the console log status example. *
19. Copy the 'updateCount' function (if exists) from 'sender' project. *
20. Update settings.json:
"formatFiles.excludePattern": "**/node_modules,**/.vscode,**/dist,**/dist/**,**/.chrome,**/misc,**/misc/**,**/sources,**/sources/**" *
21. Add to .eslintignore, .gitignore, .npmignore files: *
# Sources. *
sources/ *
/sources *
sources *
-Bring back production to true in settings.js. *
-Remove all comments. *
-Re-format error numbers + last_index.txt file. *
-Update packages. *
-Check the order of the parameters in the initiate.service.js (Titles order identical to settings.js order). *
-Add script name to tests and add validation for empty script name in initiate.service.js (copy from sender project). *
-Go over timeUtils and make sure all local "this.getDay" are being used, and not "date.getDate()" for example. *
-Fix comment in settings.js 'interval to run to calculate' => 'interval to calculate'. *
-Add index.js to "configurations" directory and replace in all places. *
-Fix comment:         // Get the backup title from the console.s *
-Fix all README.me + package.json from 'create-react-up' to 'create-react-app'. *
-Change all ect => etc - In all projects. *
-Verify package.json project name. *
-Change all README.md files to the title of the project as first line (Only one #). *
-Change from 'Start to be built' to 'Built in', and remove space lines, and the "-Goal:", *
and remove the 'This project was bootstrapped with [Create React App] *
(https://github.com/facebook/create-react-app).' line under to the description *
with line space,  all fixes in README.md. *
-Fix the exit bug on the console, it is on status SCAN and not 100% (try to scan cv-spider-v5-console-final project). *
-Re-format all error numbers + last_index.txt file. *
-Clear all comments. *
-Fix all misspells in all TXT files. *
-Format all documents. *
-Move all complete tasks to complete_tasks.txt. *
-Verify all works well. *
-Upload to GitHub. *
-Backup iOmega. *
-Fix spell mistakes in all txt files. *
-Remove all unused files, functions, and variables. *
-Remove all 'debugger' keywords. *
-Do all the ToDo points. *
-Rewrite error numbers. *
-Format all files. *
-Verify all works one last time. *
-Change the scan path in settings to "C:\\". *
-Upload to GitHub. *
-Move all complete tasks from here to complete_tasks.txt. *
-Re-check all imports in the entire project (check for duplicate imports paths). *
-Sort alphabetically all imports: external packages, settings, (containers, components, store, assert) data, models, enums, services, utils. *
-Sort alphabetically by https://alphabetizer.flap.tv/. *
-Clear empty spaces with ^\s*$. *
-Replace all 'let' to 'const' and where no bugs - change it. *
-Add 'Misc.' section to gitignore and npmignore files (include tasks TXT files + backups directory). *
-Add script name to tests and add validation for empty script name in initiate.service.js. *
-Change the logic of ignoring words today to add it to the initiation process of nspell service. *
-Test it works. *
-Clear all comments again. *
-Remove the console.log(e) from handleError function. *
-Make sure spaces in all files between bottom, need to fix cases like this: *
export { *
} *
} *
module.exports *
} *
export default *
-Insert all parameters into settings.js file. *
-Update packages. *
-Fix description in package.json + README.MD + re-create package.json-lock file. *
-Update the INSTRUCTIONS.md. *
-Give credit on README.MD to cspell on: https://github.com/streetsidesoftware/cspell-dicts/tree/master/dictionaries *
-Clear all the comments. *
-Make sure all comments end with . *
-Add "dictionaries" to all eslint, eslintignore, .gitignore, .npmignore, .vscode/settings.js. *
-Add misc\\backups to ignorePaths. *
-Add internet connection validation. *
-Merge scanContent.service.js and scanName.service.js into single file, since it's using most of the same code - run with the same "run" function. *
-Add on CONTENT the skip counter. *
-Add index.js to "configurations" directory and replace in all places. *
-Add ignore words in file names only in CONTENT method - Canceled. *
-The content scan script: *
========================= *
-Move to nspell npm package. *
-Rebuild the logic of the spellCheck.service + add nspell service to build there *
 all the logic of the dictionaries, and provide the nspell. *
-Build the logic to download all the 'cpell' dictionaries by giving links to txt files. *
-Initiate all the dictionaries after downloading them. *
-Get all the files inside dictionaries directory and initiate them to the nspell. *
-If no files inside don't initiate anything. *
-Each time it runs, it needs to initiate the TXT files. *
-If a dictionary directory does not exist, download all the files to TXT files to the directory and initiate them. *
-If a dictionary already exists don't need to download the files again, just initiate the files. *
-Test again the content for misspells. *
-Log all the misspells into the dist directory to the file content_#DateTime#. *
https://github.com/streetsidesoftware/cspell-dicts/tree/master/dictionaries *
-Get the file types in the array from settings.js. *
-Change the logic to the following: *
-Check for more than 1 and exists. *
-Trim spaces. *
-Clear all numbers and special symbols (except '`). *
-Check again for more than 1 and exists. *
-Then get suggestions. *
-Verify all works af before. *
-Add to the console status line the path to scan. *
5. Limit the count of words for each file name/content. *
-Build a scan file in the tests directory, that will both display the result for the file name and the content - Canceled. *
-The name scan script: *
====================== *
-Log all the misspells into the dist directory to the file name_#DateTime#. *
-If unable to open/read the file, catch the exception and continue to the next file. *
-Both: *
-Clear special symbols (not include ,.,`) and all none-English characters. *
-Ignore words that contain only numbers (at least 2 English characters in a row). *
-The console log status will look like this: *
===[SETTINGS] Time: 00.05:16:58 [-] | Method: NAME | Ignore Words: 45 | Ignore Paths: 10=== *
===[GENERAL] Current: 104,342,450/454,334,500 (31.60%) | Status: SCAN/PAUSE/FINISH=== *
===[ITEMS] Total: ✅ 1,412 | Misspell: ❌ 23 | Skip: 143,434 | Error: 1=== *
===[WORDS] Total: 473,345,994 | Misspell: 1,348 | Ignore: 3=== *
===[NAME] complete_tasks.txt=== (cut the path if too long) *
===[PATH] C:\Or\Web\sender\sender\misc\documents\=== (cut the path if too long) *
6. Delay in milliseconds between each file scan. *
-The log structure will be identical to all: *
C:\Or\Web\sender\sender\misc\documents\complete_tasks.txt *
task => task, tak, te. *
task => task, tak, te. *
================================ *
-Limit each log file to a number of misspells (5000) - From settings.js. *
7. Limit the number of characters of path in console status log. *
-Ignore words that contain 1 character. *
-Build the backup logic. *
-Build the function that checks words and returns the result. *
-Build the function of splitting words file names. *
-This might help: https://stackoverflow.com/questions/37523267/javascript-regex-how-to-single-out-english-words-and-non-english-characters-and *
-There will be general settings.js for both scripts: *
1. Scan the files according to a given path. *
2. Ignore words list. *
3. Ignore paths list. *
4. Limit files count to check. *
-Test the "typo-js" npm package. *
-Add options to limit the number of files to scan - Canceled. *